using NAudio;
using NAudio.Wave;
// using NAudio.WindowsMediaFormat;
using NLayer;
using NVorbis;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using UnityEngine;

public static class WAV {
    //private static float BytesToFloat(byte first, byte second){
    //    //little endian
    //    return (short)((second << 8) | first) / (float)short.MaxValue;
    //}
    //private static byte[] FloatsToBytes(float[] floats){
    //    byte[] result = new byte[floats.Length * 2];
    //    short n;
    //    for (int i = 0; i < floats.Length; i++){
    //        n = (short)(floats[i] * short.MaxValue);
    //        result[i * 2] = (byte)n;
    //        result[i * 2 + 1] = (byte)(n >> 8);
    //    }
    //    return result;
    //}
    // static int BytesToInt(byte[] bytes, int offset = 0){
    //     int value = 0;
    //     for (int i = 0; i < 4; i++){
    //         value |= ((int)bytes[offset + i]) << (i * 8);
    //     }
    //     return value;
    // }
    public static AudioClip AudioToClip(string path){
        try{
            AudioFileReader audioFileReader = new AudioFileReader(path);
            AudioClip audioClip = AudioClip.Create("wavclip",
                (int)(audioFileReader.Length / sizeof(float) / audioFileReader.WaveFormat.Channels),
                audioFileReader.WaveFormat.Channels, audioFileReader.WaveFormat.SampleRate, false,
                data => { audioFileReader.Read(data, 0, data.Length); });
            audioFileReader.Dispose();
            return audioClip;
        } catch (Exception e){
            Debug.LogWarning(e.GetBaseException());
            return null;
        }
    }
    public static AudioClip Mp3ToClip(string path){
        try{
            MpegFile mpegFile = new MpegFile(path);
            AudioClip audioClip = AudioClip.Create("mp3clip",
                (int)(mpegFile.Length / sizeof(float) / mpegFile.Channels),
                mpegFile.Channels, mpegFile.SampleRate, false,
                data => { mpegFile.ReadSamples(data, 0, data.Length); });
            mpegFile.Dispose();
            return audioClip;
        } catch (Exception e){
            Debug.LogWarning(e.Message);
            return null;
        }
    }
    public static AudioClip OggToClip(string path){
        try{
            VorbisReader vorbis = new VorbisReader(path);
            AudioClip audioClip = AudioClip.Create("oggclip",
                (int)(vorbis.SampleRate * vorbis.TotalTime.TotalSeconds),
                vorbis.Channels, vorbis.SampleRate, false,
                data => { vorbis.ReadSamples(data, 0, data.Length); }
                // , position => { vorbis.DecodedTime = new TimeSpan(position); }
            );
            vorbis.Dispose();
            return audioClip;
        } catch (Exception e){
            Debug.LogWarning(e.Message);
            return null;
        }
    }

//     public static AudioClip WmaToClip(string path){
// #if UNITY_EDITOR_WIN || UNITY_STANDALONE_WIN
//         try{
//             WMAFileReader fileReader = new WMAFileReader(path);
//             //MediaFoundationReader fileReader = new MediaFoundationReader(path);
//             //MediaFoundationResampler resampler = new MediaFoundationResampler(fileReader, WaveFormat.CreateCustomFormat(WaveFormatEncoding.MpegLayer3, fileReader.WaveFormat.SampleRate,
//             //    fileReader.WaveFormat.Channels, fileReader.WaveFormat.SampleRate * fileReader.WaveFormat.BitsPerSample / 8, 0, fileReader.WaveFormat.BitsPerSample));
//             byte[] bytes;
//             short n;
//             AudioClip audioClip = AudioClip.Create("wmaclip",
//                 //(int)(fileReader.WaveFormat.SampleRate * fileReader.TotalTime.TotalSeconds),
//                 (int)(fileReader.Length / sizeof(short) / fileReader.WaveFormat.Channels),
//                 fileReader.WaveFormat.Channels, fileReader.WaveFormat.SampleRate, false,
//                 data => {
//                     bytes = new byte[data.Length * 2];
//                     for (int i = 0; i < data.Length; i++){
//                         n = (short)(data[i] * short.MaxValue);
//                         bytes[i * 2] = (byte)n;
//                         bytes[i * 2 + 1] = (byte)(n >> 8);
//                     }
//                     fileReader.Read(bytes, 0, bytes.Length);
//                 });
//             fileReader.Dispose();
//             //resampler.Dispose();
//             return audioClip;
//         } catch (Exception e){
//             Debug.LogWarning(e.Message);
//             return null;
//         }
// #else
//         return null;
// #endif
//     }
}
